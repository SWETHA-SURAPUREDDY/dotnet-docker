# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'bb38e68c-0c47-46f6-9286-a4a36a49934c'
  imageRepository: 'dotnetdocker'
  containerRegistry: 'acrsurapureddyswetha.azurecr.io'
  dockerfilePath: './samples/aspnetapp/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acrsurapureddyswetha98d9-auth'



stages:
- stage: PreDeploymentValidation
  displayName: Pre-Deployment Validation
  jobs:
  - job: PreValidation
    displayName: Pre-Deployment Validation
    pool: local
    steps:
    - script: |
        chmod +x ./pre-deploy-validation.sh
        ./pre-deploy-validation.sh
      displayName: 'Run Pre-Deployment Validation'

- stage: Build
  displayName: Build stage
  dependsOn: PreDeploymentValidation
  jobs:
  - job: Build
    displayName: Build
    pool: local
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)

    - upload: manifests
      artifact: manifests

- stage: DeployTest
  displayName: Deploy to Test Stage
  dependsOn: Build
  jobs:
  - deployment: DeployTest
    displayName: Deploy to Test
    pool: local
    environment: 'test'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret for Test Namespace
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'app-cluster-test'
              namespace: 'test'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster in Test
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'app-cluster-test'
              namespace: 'test'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'

- stage: DeployProd
  displayName: Deploy to Production Stage
  dependsOn: DeployTest
  condition: succeeded()
  jobs:
  - deployment: DeployProd
    displayName: Deploy to Production
    pool: local
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@1
            displayName: Create imagePullSecret for Prod Namespace
            inputs:
              action: 'createSecret'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'app-cluster-prod'
              namespace: 'prod'
              secretType: 'dockerRegistry'
              secretName: '$(imagePullSecret)'
              dockerRegistryEndpoint: '$(dockerRegistryServiceConnection)'

          - task: KubernetesManifest@1
            displayName: Deploy to Kubernetes cluster in Production
            inputs:
              action: 'deploy'
              connectionType: 'kubernetesServiceConnection'
              kubernetesServiceConnection: 'app-cluster-prod'
              namespace: 'prod'
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              containers: '$(containerRegistry)/$(imageRepository):$(tag)'
              imagePullSecrets: '$(imagePullSecret)'

- stage: PostDeploymentValidation
  displayName: Post-Deployment Validation
  dependsOn: DeployProd
  jobs:
  - job: PostValidation
    displayName: Post-Deployment Validation
    pool: local
    steps:
    - script: |
        chmod +x ./post-deploy-validation.sh
        ./post-deploy-validation.sh
      displayName: 'Run Post-Deployment Validation'

